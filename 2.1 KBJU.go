package main

import (
	"log"
	"strconv"
	"math"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func SVO(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel, chatID int64, pol int, voz int, rost int, ves int, act float64) {
    msg := tgbotapi.NewMessage(chatID, "–î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π? ")
    buttons := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞"),
        ),
    )
    msg.ReplyMarkup = buttons
    if _, err := bot.Send(msg); err != nil {
        log.Println("Error sending message:", err)
        return
    }

    for {
        update := <-updates
        if update.Message == nil || update.Message.Chat.ID != chatID {
            continue
        }

        log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

        switch update.Message.Text {
        case "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
            cal := math.Round(0.8*((10*float64(ves) + 6.25*float64(rost) - 5*float64(voz) + float64(pol)) * act))
            bel := math.Round((0.3 * cal) / 4)
            zir := math.Round((0.2 * cal) / 9)
            ugl := math.Round((0.5 * cal) / 4)
            svo := fmt.Sprintf("*–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–ê–õ–û–†–ò–ô: %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–ï–õ–ö–ê (–≥): %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ñ–ò–†–û–í (–≥): %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–ì–õ–ï–í–û–î–û–í (–≥): %.0f", cal, bel, zir, ugl)
            msg := tgbotapi.NewMessage(chatID, svo)
            if _, err := bot.Send(msg); err != nil {
                log.Println("Error sending message:", err)
            }
        case "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞":
            cal := math.Round(((10*float64(ves) + 6.25*float64(rost) - 5*float64(voz) + float64(pol)) * act))
            bel := math.Round((0.2 * cal) / 4)
            zir := math.Round((0.3 * cal) / 9)
            ugl := math.Round((0.5 * cal) / 4)
            svo := fmt.Sprintf("*–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–ê–õ–û–†–ò–ô: %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–ï–õ–ö–ê (–≥): %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ñ–ò–†–û–í (–≥): %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–ì–õ–ï–í–û–î–û–í (–≥): %.0f", cal, bel, zir, ugl)
            msg := tgbotapi.NewMessage(chatID, svo)
            if _, err := bot.Send(msg); err != nil {
                log.Println("Error sending message:", err)
            }
        case "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":
            cal := math.Round(1.15*((10*float64(ves) + 6.25*float64(rost) - 5*float64(voz) + float64(pol)) * act))
            bel := math.Round((0.3 * cal) / 4)
            zir := math.Round((0.2 * cal) / 9)
            ugl := math.Round((0.5 * cal) / 4)
            svo := fmt.Sprintf("*–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–ê–õ–û–†–ò–ô: %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–ï–õ–ö–ê (–≥): %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ñ–ò–†–û–í (–≥): %.0f\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–ì–õ–ï–í–û–î–û–í (–≥): %.0f", cal, bel, zir, ugl)
            msg := tgbotapi.NewMessage(chatID, svo)
            if _, err := bot.Send(msg); err != nil {
                log.Println("Error sending message:", err)
            }
        case "–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞":
            Calculators(bot, update, updates)
            return
        default:
            msg := tgbotapi.NewMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π.")
            if _, err := bot.Send(msg); err != nil {
                log.Println("Error sending message:", err)
                return
            }
            continue
        }
    }
}


func RasKBZU(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) {
	chatID := update.Message.Chat.ID 
	pol := getpol(bot, update, updates) 
	voz := getvoz(bot, update, updates)
	rost := getrost(bot, update, updates)
	ves := getves(bot, update, updates)
	act := getact(bot, update, updates)
    log.Print(pol, voz, rost, ves, act)
	SVO(bot, update, updates, chatID, pol, voz, rost, ves, act)

}

func getpol(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) int {
    chatID := update.Message.Chat.ID
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª: üë§")
    buttons := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ú—É–∂—Å–∫–æ–π"),
            tgbotapi.NewKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞"),
        ),
    )
    msg.ReplyMarkup = buttons
    if _, err := bot.Send(msg); err != nil {
        log.Panic(err)
    }

    var pol int // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–ª
    for {
        update := <-updates
        if update.Message == nil {
            continue
        }

        log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

        switch update.Message.Text {
        case "–ú—É–∂—Å–∫–æ–π":
            pol = 5 // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        case "–ñ–µ–Ω—Å–∫–∏–π":
            pol = -161 // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        case "–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞":
            Calculators(bot, update, updates)
            return 0
        default:
            msg := tgbotapi.NewMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞")
            if _, err := bot.Send(msg); err != nil {
                log.Panic(err)
            }
            continue
        }
        break
    }
    return pol
}

func getvoz(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) int {
    chatID := update.Message.Chat.ID
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ")
    buttons := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞"),
        ),
    )
    msg.ReplyMarkup = buttons
    if _, err := bot.Send(msg); err != nil {
        log.Panic(err)
    }
    var err error
    var voz int
    for {
        update := <-updates
        if update.Message == nil {
            continue
        }

        if update.Message.Text == "–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞" {
            Calculators(bot, update, updates)
            return 0
        }

        log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

        voz, err = strconv.Atoi(update.Message.Text)
        if err != nil || voz <= 0 || voz >= 122 {
            msg := tgbotapi.NewMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            if _, err := bot.Send(msg); err != nil {
                log.Panic(err)
            }
            continue
        }
        break
    }
    return voz
}

func getrost(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) int {
    chatID := update.Message.Chat.ID
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º): ")
    buttons := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞"),
        ),
    )
    msg.ReplyMarkup = buttons
    if _, err := bot.Send(msg); err != nil {
        log.Panic(err)
    }
    var err error
    var rost int 
    for {
        update := <-updates
        if update.Message == nil {
            continue
        }

        if update.Message.Text == "–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞" {
            Calculators(bot, update, updates)
            return 0
        }

        log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

        rost, err = strconv.Atoi(update.Message.Text)
        if err != nil || rost <= 0 || rost >= 249 {
            msg := tgbotapi.NewMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç")
            if _, err := bot.Send(msg); err != nil {
                log.Panic(err)
            }
            continue
        }
        break
    }
    return rost
}

func getves(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) int {
    chatID := update.Message.Chat.ID
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥): ")
    buttons := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞"),
        ),
    )
    msg.ReplyMarkup = buttons
    if _, err := bot.Send(msg); err != nil {
        log.Panic(err)
    }
    var err error
    var ves int 
    for {
        update := <-updates
        if update.Message == nil {
            continue
        }

        if update.Message.Text == "–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞" {
            Calculators(bot, update, updates)
            return 0
        }

        log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

        ves, err = strconv.Atoi(update.Message.Text)
        if err != nil || ves <= 0 || ves >= 645 {
            msg := tgbotapi.NewMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –≤–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å.")
            if _, err := bot.Send(msg); err != nil {
                log.Panic(err)
            }
            continue
        }
        break
    }
    return ves
}

func getact(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) float64 {
    chatID := update.Message.Chat.ID
    msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: üèãÔ∏è‚Äç‚ôÇÔ∏è")
    buttons := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –∏ —Å–ø–æ—Ä—Ç"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞"),
        ),
    )
    msg.ReplyMarkup = buttons
    if _, err := bot.Send(msg); err != nil {
        log.Panic(err)
    }

    var act float64 // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é act
    for {
        update := <-updates
        if update.Message == nil {
            continue
        }

        log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

        switch update.Message.Text {
        case "–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏":
            act = 1.2
        case "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é":
            act = 1.375
        case "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é":
            act = 1.55
        case "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é":
            act = 1.725
        case "–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –∏ —Å–ø–æ—Ä—Ç":
            act = 1.9
        case "–í—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞":
            Calculators(bot, update, updates)
            return 0
        default:
            msg := tgbotapi.NewMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            if _, err := bot.Send(msg); err != nil {
                log.Panic(err)
            }
            continue
        }
        break
    }
    return act
}
